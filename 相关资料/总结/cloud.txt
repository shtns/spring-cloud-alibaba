微服务架构：
阿里的Dubbo，由于内部出现问题停止更新，，spring社区结合netflix整出来一个spring cloud
实际而言就是netflix的五大神兽、eureka、ribbon、hystrix、zuul、config
结合springcloud加了一些不是很重要的技术和它整合，这时候推出了spring cloud
后面由于经营不善，nefflix的停止更新，cloudAlibaba的出现，spring cloud和阿里进行整合出现了 spring cloud alibaba

spring cloud alibaba版本选型：
spring cloud alibaba：2.2.4.RELEASE
sentinel：1.8.0
nacos：1.4.1
seata：1.3.0
spring cloud：Hoxton.SR8
srping boot：2.3.2.RELEASE

服务降级（fallback）：一般只在消费方使用，即：使用openFeign所在的项目
不让客户端等待，并且立刻返回一个友好提示
程序运行异常
调用超时
服务熔断出发服务降级

服务熔断（break）：
当请求达到一定的数量后，服务器避免自己挂了，直接拒绝访问，然后调用服务降级给出友好提示

服务限流（flowlimit）：
当大量请求过来的时候，禁止一窝蜂拥挤，设置一秒钟允许通过几个

Fallback主要是用来解决依赖的服务不可用或者调用服务失败或超时，使用默认的返回值。


搭建nacos注册、配置中心、配置动态加载配置文件、数据源、常用配置、等	
我们使用的druid连接池，druid在初始化数据源之后连接地址和账号是不能改的，我重写了druid的DruidDataSource数据库连接方法，首先使用value注解获取到配置上的连接地址、用户、密码、加载驱动，然后set到datasource中，使用spring的config注解+RefreshScope实现数据源热加载

我们使用的linuxjar包方式运行nacos，然后配置nacos数据持久化，把内置数据库切换到mysql，我们配置分为私有配置、共享配置

流控规则：

1、资源名：唯一名称，默认请求路径

2、针对来源：sentinel可以针对调用者进行限流，填写微服务名默认default（不区分来源）

3、阈值类型
3.1、QPS：每秒请求数量，当调用该api的QPS达到阈值的时候，进行限流
3.2、线程数：当调用该api的线程数达到阈值的时候，进行限流
3.3、比如说一家银行，可以处理五个业务，QPS有十个业务需要办理，银行对QPS的请求直接拒之门外不让进来
		而线程数的话现在银行只能办理五个业务，这时候线程数有10，没问题都能进来
		但是银行只能处理五个线程，其他请求走兜底方案

4、流控模式
4.1、直接：api达到限流条件时，直接限流
4.2、关联：当关联的资源达到阈值时就限流自己
4.3、链路：只记录指定链路上的流量（指定资源从入口资源进来的流量，如果达到阈值，就进行限流）

5、流控效果
5.1、快速失败：直接失败，抛异常
5.2、WarmUp：根据冷加载因子默认3，从阈值除以3，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮
5.3、排队等待：当一个请求设置每秒请求次数，一旦超过这个阈值就会控制请求的通过间隔时间

降级规则：

1、降级策略：
1.1、RT（平均相应时间，秒级）
当最小请求数的通过时间，超过设置的最大RT，并且这种情况大过设置的比例阈值时触发降级
RT最大支持4900（更大需要通过-Dcsp.sentinel.statistic.max.tr=xxxx才能生效）
1.2、异常比例
当资源的每秒请求量超过最小请求数，并且异常总数超过设置的比例阈值时触发服务降级
1.3、异常数
最小请求数发生的异常超过异常数触发降级

热点规则：
经常访问的数据，很多时候我们希望统计某个热点数据中访问频次最高的TopK数据，并对其访问进行限制，比如：
商品id为参数，统计一段时间内最常购买的商品id并进行限制
用户id为参数，针对一段时间内频繁访问的用户id进行限制

blockException：sentinel配置的规则，违反了报这个错
fallback：java运行时异常报这个

seata：1+3的套件组成（解决多个库数据同步问题）
1：分布式处理过程的全局唯一事务id
2、3大组件：
TC：事务协调器，维护全局事务的运行状态，赋值协调并驱动全局事务事务提交或回滚
TM：事务管理器，定义全局事务的范围，开始全局事务、提交或回滚全局事务
RM：资源管理器，管理分支事务处理的资源，与TC交谈以注册分支事务和报告事务的状态，并驱动分支事务提交或回滚

处理过程：
1、TM向TC申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的XID。
2、XID微服务调用链路的上上下文中传播。
3、RM向TC注册分支事务，将其纳入XID对应的全局事务管辖。
4、TN向TC发起针对XID的全局提交或回滚决议。
5、TC调度XID下管辖的全部分支事务完成提交或回滚请求。

TC：seata服务器
TM：@GlobalTransactional（事务发起方）
RM：一个数据库就是一个RM（事务参与方）
